@tailwind base;
@tailwind components;

@tailwind utilities;


@layer base {
    @font-face {
        font-family: Notulen;
        src: url('./fonts/Notulen.otf') ;
    }
    @font-face {
        font-family: Urbanist;
        src: url('./fonts/Urbanist-Bold.ttf') ;
    }
    h1{
        @apply text-6xl mt-8 mx-8
    }
    h2{
        @apply text-4xl mt-12 mx-8

    }

    h3{
        @apply text-3xl tracking-widest
    }

    h4,h6{
        @apply  text-sm font-urbanist
    }
    ul{
        @apply mt-8 w-full
    }
    ul>li{
        @apply mt-3 text-lg font-urbanist hover:bg-hover cursor-pointer tracking-widest w-full
    }
    .sidebar{
        @apply flex flex-col items-center h-screen py-6 text-center w-60 md:w-1/4 xl:w-1/5 bg-lightblack
    }

    .form-control{
        @apply bg-transparent border border-white rounded-3xl w-2/3 focus:outline-none px-2 py-2 text-white font-urbanist focus:border-yellow-500
    }

    .btn{
        @apply w-52 p-2 ml-8 bg-transparent border border-white rounded-3xl font-urbanist hover:bg-yellow-500 hover:border-0
    }


    .card{
       @apply flex flex-col w-auto h-auto p-4 text-white rounded-md lg:h-72 bg-card lg:w-52
    }
}




/* 
let initialVal;
  let releasesSettings = {
    responsive: [
      {
        breakpoint: 2800,
        settings: {
          slidesToShow: 6,
        },
      },
      {
        breakpoint: 1300,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 2,
        },
      },
      // {
      //   breakpoint: 600,
      //   settings: {
      //     slidesToShow: 1,
      //   },
      // },
    ],
  };

  // Set initial no of slide
  (() => {
    let { innerWidth: width } = window;
    const { responsive } = releasesSettings;

    if (width < responsive[0].breakpoint && width > responsive[1].breakpoint) {
      initialVal = responsive[0].settings.slidesToShow;
    } else if (
      width < responsive[1].breakpoint &&
      width > responsive[2].breakpoint
    ) {
      initialVal = responsive[1].settings.slidesToShow;
    } else if (width < responsive[2].breakpoint) {
      initialVal = responsive[2].settings.slidesToShow;
    } else {
      initialVal = 6;
    }
  })();

  // slidesto show state value

  let [slidesToShow, setSlides] = useState(initialVal);

  // album cards renderer function
  const albumcardsrenderer = () => {
    let { innerWidth: width } = window;
    const { responsive } = releasesSettings;
    if (width < responsive[0].breakpoint && width > responsive[1].breakpoint) {
      setSlides(responsive[0].settings.slidesToShow);
    } else if (
      width < responsive[1].breakpoint &&
      width > responsive[2].breakpoint
    ) {
      setSlides(responsive[1].settings.slidesToShow);
    } else if (width < responsive[2].breakpoint) {
      setSlides(responsive[2].settings.slidesToShow);
    } else {
      setSlides(6);
    }
  };
*/